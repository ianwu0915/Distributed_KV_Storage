package com.github.raftimpl.raft.service;

import com.baidu.brpc.client.RpcCallback;
import com.github.raftimpl.raft.proto.RaftProto;

import java.util.concurrent.Future;

/**
 * 用于生成client异步调用所需的proxy
 * Define the contract for Async RPC methods for client side to call.
 * The actual implementation will be generated by brpc with an RPC proxy
 * That takes a request and a callback as arguments.
 * Methods: preVote, requestVote, appendEntries, installSnapshot
 */
public interface RaftConsensusServiceAsync extends RaftConsensusService {


    // Each method returns a Future object, allowing for non-blocking calls.
    // It also takes an RpcCallback parameter, which is called when the response is received.
    Future<RaftProto.VoteResponse> preVote(
            RaftProto.VoteRequest request,
            RpcCallback<RaftProto.VoteResponse> callback);

    Future<RaftProto.VoteResponse> requestVote(
            RaftProto.VoteRequest request,
            RpcCallback<RaftProto.VoteResponse> callback);

    Future<RaftProto.AppendEntriesResponse> appendEntries(
            RaftProto.AppendEntriesRequest request,
            RpcCallback<RaftProto.AppendEntriesResponse> callback);

    Future<RaftProto.InstallSnapshotResponse> installSnapshot(
            RaftProto.InstallSnapshotRequest request,
            RpcCallback<RaftProto.InstallSnapshotResponse> callback);
}
